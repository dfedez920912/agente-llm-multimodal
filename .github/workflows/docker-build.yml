# .github/workflows/docker-build.yml
name: Build and Push Docker Image (Lightweight)

on:
  push:
    branches:
      - main # O la rama que desees

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }} # Ej: dfedez920912/agente-llm-multimodal

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Necesario para subir a GHCR

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Configurar QEMU para multiplataforma (opcional)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Configurar Docker Buildx para builds eficientes
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Obtener la fecha/hora actual para la etiqueta (opcional)
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      # Etiqueta basada en commit y timestamp
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.date.outputs.date }}
            type=raw,value={{sha}}

      # Iniciar sesión en el registro (GHCR en este caso)
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # Usar token del repositorio

      # Construir y subir la imagen LIGERA al registro
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Directorio donde está el Dockerfile (sin descargas de modelos)
          push: true # Subir la imagen
          tags: ${{ steps.meta.outputs.tags }} # Etiquetas generadas arriba
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha # Usar cache de GitHub Actions
          cache-to: type=gha,mode=max # Almacenar cache en GitHub Actions
          # No se pasan build-args para modelos aquí